async ${targetObjName}(obj, args, context, ast){
  if (context.${dataLoaderId} == null) {
    let db = await context.__mongodb;
    context.${dataLoaderId} = new DataLoader(async keys => {
      let $match = { _id: { $in: keys.filter(id => id).map(id => {
        if(id !== 'null') return ObjectId(id);
      }) } };
      let queryPacket = decontructGraphqlQuery(args, ast, ${targetTypeName}Metadata, null);
      let { $project, $sort, $limit, $skip } = queryPacket;

      let aggregateItems = [{ $match }, { $project }];
      let results = await dbHelpers.runQuery(db, "${table}", aggregateItems);
      cleanUpResults(results, ${targetTypeName}Metadata);

      let destinationMap = new Map([]);
      for (let result of results) {
        destinationMap.set("" + result._id, result);
      }
      return keys.map(id => destinationMap.get("" + id) || null);
    });
  }
  return obj._id == null ? null : context.${dataLoaderId}.load(obj._id);
}
